"use strict";(self.webpackChunk_davinci_docs=self.webpackChunk_davinci_docs||[]).push([[488],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,s(s({ref:t},p),{},{components:r})):n.createElement(h,s({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9192:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},s="Controllers",l={unversionedId:"modules/http-server/controllers",id:"modules/http-server/controllers",title:"Controllers",description:"A Controller is a class that implements methods that will handle incoming requests.",source:"@site/docs/modules/http-server/controllers.md",sourceDirName:"modules/http-server",slug:"/modules/http-server/controllers",permalink:"/davinci/docs/2.x/modules/http-server/controllers",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Express",permalink:"/davinci/docs/2.x/modules/http-server/express"},next:{title:"Context",permalink:"/davinci/docs/2.x/modules/http-server/context"}},i={},c=[{value:"Implements controller methods",id:"implements-controller-methods",level:2},{value:"Advanced cases",id:"advanced-cases",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controllers"},"Controllers"),(0,o.kt)("p",null,"A Controller is a class that implements methods that will handle incoming requests.\nIt implements an application\u2019s business logic and acts as a bridge between the HTTP/REST API and domain/database models."),(0,o.kt)("h2",{id:"implements-controller-methods"},"Implements controller methods"),(0,o.kt)("p",null,"A controller method is a decorated class method that takes parameter and return a result.\nAs you may notice, all the logic that deal with low-level ",(0,o.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"response")," constructs, is abstracted away."),(0,o.kt)("p",null,"A class is marked as controller using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@route.controller()")," decorator."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@route.[get|post|patch|put|del|head]()")," decorators mark a class method as a route handler."),(0,o.kt)("p",null,"A route handler can accept arguments, that can be defined using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@route.[path|query|body]()")," decorators.\nThe type of each argument will be inferred and inspected, and validated against the value provided.",(0,o.kt)("br",{parentName:"p"}),"\n","You can even supply complex types, like schema classes.\nPlease note that due to a limitation on the typescript reflection mechanism, there are cases\nwhere you need to pass the type explicitly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { route } from '@davinci/http-server';\n\n@route.controller({ basePath: '/api/customers' })\nexport class CustomerController {\n    @route.get({ path: '/', summary: 'This is a find method' })\n    findCustomer(@route.query() firstname: string) {\n        return firstname;\n    }\n\n    @route.post({ path: '/create', summary: 'This is a create method' })\n    createCustomer(@route.body() data: object) {\n        return { success: true, data };\n    }\n}\n")),(0,o.kt)("h2",{id:"advanced-cases"},"Advanced cases"),(0,o.kt)("p",null,"There are some cases where you may want to have more control on how the incoming request\nwill be handled.",(0,o.kt)("br",{parentName:"p"}),"\n","In those cases, you can inject the Low level ",(0,o.kt)("inlineCode",{parentName:"p"},"Req")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Res")," objects as arguments",(0,o.kt)("br",{parentName:"p"}),"\n","using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@route.[request|response]()"),"\ndecorators."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { route } from '@davinci/http-server';\nimport type { FastifyRequest, FastifyResponse } from 'fastify';\n\n@route.controller({ basePath: '/api/customers' })\nexport class CustomerController {\n    @route.get({ path: '/custom-response', summary: 'This method will redirect' })\n    customResponse(@route.request() req: FastifyRequest, @route.response() res: FastifyResponse) {\n        const redirectUrl = req.hostname === 'myHostname' ? '/redirect-url-1' : '/redirect-url-2';\n\n        return res.redirect(redirectUrl);\n    }\n}\n")))}u.isMDXComponent=!0}}]);