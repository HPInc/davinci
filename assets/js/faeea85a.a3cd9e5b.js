"use strict";(self.webpackChunk_davinci_docs=self.webpackChunk_davinci_docs||[]).push([[942],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4387:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={},o="Local App Variables",l={unversionedId:"local-variables",id:"version-2.x/local-variables",title:"Local App Variables",description:"Local App Variables are a way to decorate the DaVinci app instance with additional variables that persist throughout the life of the application. Some common use cases for this feature include:",source:"@site/versioned_docs/version-2.x/local-variables.md",sourceDirName:".",slug:"/local-variables",permalink:"/davinci/docs/2.x/local-variables",draft:!1,tags:[],version:"2.x",frontMatter:{},sidebar:"mySidebar",previous:{title:"Interceptors",permalink:"/davinci/docs/2.x/interceptors"},next:{title:"Migration from V1",permalink:"/davinci/docs/2.x/migration-from-v1"}},s={},c=[{value:"How to use",id:"how-to-use",level:2},{value:"1. Typescript Augmentation",id:"1-typescript-augmentation",level:3},{value:"2. Setting the variables",id:"2-setting-the-variables",level:3},{value:"3. Accessing the variables",id:"3-accessing-the-variables",level:3}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"local-app-variables"},"Local App Variables"),(0,r.kt)("p",null,"Local App Variables are a way to decorate the DaVinci app instance with additional variables that persist throughout the life of the application. Some common use cases for this feature include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Injection of a method to perform fake HTTP requests without the need for a listening HTTP server"),(0,r.kt)("li",{parentName:"ul"},"Scripting, such as generating client SDKs"),(0,r.kt)("li",{parentName:"ul"},"Common utilities or libraries")),(0,r.kt)("h2",{id:"how-to-use"},"How to use"),(0,r.kt)("h3",{id:"1-typescript-augmentation"},"1. Typescript Augmentation"),(0,r.kt)("p",null,"To modify existing DaVinci types and effectively augment them, ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," is used. This allows for the addition of types for newly defined local variables. The augmentation must be performed in the main file of a module, as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// this file is set as the target of the 'main' entry in the package.json\n\ndeclare module '@davinci/core' {\n    interface LocalVars {\n        // a custom local variable\n        myCustomVariable?: number\n        \n        // instances\n        dbInstance?: DBInstance\n        \n        // common methods\n        recordMetric: (name: string, value: unknown) => void \n    }\n}\n")),(0,r.kt)("h3",{id:"2-setting-the-variables"},"2. Setting the variables"),(0,r.kt)("p",null,"After dealing with the TypeScript shenanigans, the next step is to add the variables defined above into the app. Here's an example of how to do this,\nwithin a module lifecycle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module } from \"./Module\";\nimport { App } from \"./App\";\n\nclass MyModule extends Module {\n    onRegister(app: App) {\n        app.addLocalVariable('myCustomVariable', 100);\n        app.addLocalVariable('recordMetric', (name: string, value: unknown) => {\n            // ...\n        })\n    }\n}\n\n")),(0,r.kt)("h3",{id:"3-accessing-the-variables"},"3. Accessing the variables"),(0,r.kt)("p",null,"The variables previously defined can now be accessed via the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.locals")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"app.locals.myCustomVariable // 100\napp.locals.recordMetric('callDuration', 1000)\n")))}u.isMDXComponent=!0}}]);