"use strict";(self.webpackChunk_davinci_docs=self.webpackChunk_davinci_docs||[]).push([[955],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),m=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return o.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(t),u=r,f=p["".concat(l,".").concat(u)]||p[u]||c[u]||a;return t?o.createElement(f,i(i({ref:n},d),{},{components:t})):o.createElement(f,i({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<a;m++)i[m]=t[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var o=t(7462),r=(t(7294),t(3905));const a={},i="Mongoose",s={unversionedId:"modules/mongoose/mongoose",id:"modules/mongoose/mongoose",title:"Mongoose",description:"DaVinci, per se is database agnostic and doesn't have an opinion on how your API persists the data.",source:"@site/docs/modules/mongoose/mongoose.md",sourceDirName:"modules/mongoose",slug:"/modules/mongoose/",permalink:"/davinci/docs/2.x/modules/mongoose/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"OpenAPI",permalink:"/davinci/docs/2.x/modules/openapi/"},next:{title:"Health Checks",permalink:"/davinci/docs/2.x/modules/health-checks/"}},l={},m=[{value:"Installation",id:"installation",level:2},{value:"Define the Schema",id:"define-the-schema",level:2},{value:"Create the Model",id:"create-the-model",level:2},{value:"Hooks",id:"hooks",level:2}],d={toc:m};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mongoose"},"Mongoose"),(0,r.kt)("p",null,"DaVinci, per se is database agnostic and doesn't have an opinion on how your API persists the data."),(0,r.kt)("p",null,"However, it provides a set of utilities that allow you to use ",(0,r.kt)("inlineCode",{parentName:"p"},"MongoDB")," in conjunction with it."),(0,r.kt)("p",null,"More specifically, it provides:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Functions to generate Mongoose models starting from a decorated typescript class."),(0,r.kt)("li",{parentName:"ul"},"Functions to register some ",(0,r.kt)("inlineCode",{parentName:"li"},"write/read")," hooks.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @davinci/mongoose mongoose\n")),(0,r.kt)("h2",{id:"define-the-schema"},"Define the Schema"),(0,r.kt)("p",null,"The schema is, once again, defined using decorators applied to methods of a class.\nIt means that the same schema can be reused for different things,\nfor example as mongoose and openapi schemas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Schema } from 'mongoose';\nimport { mgoose } from '@davinci/mongoose';\n\nclass CustomerPhone {\n    @mgoose.prop()\n    number: string;\n\n    @mgoose.prop()\n    isPrimary: boolean;\n}\n\n// we can define compound indexes using the index decorator\n// alternatively, they can be specified at the field level\n@mgoose.index({ firstname: 1, lastname: 1 }, { unique: true })\nexport default class Customer {\n    @mgoose.prop({ required: true })\n    firstname: string;\n\n    @mgoose.prop({ required: true })\n    lastname: string;\n\n    @mgoose.prop({ enum: ['member', 'admin'] })\n    role: string;\n\n    @mgoose.prop({ type: [CustomerPhone] })\n    phones: CustomerPhone[];\n\n    @mgoose.prop({ type: Schema.Types.ObjectId })\n    @mgoose.populate({\n        name: 'account',\n        opts: { ref: 'Account', foreignField: '_id', justOne: true }\n    })\n    accountId: string;\n}\n")),(0,r.kt)("h2",{id:"create-the-model"},"Create the Model"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"generateModel")," function of the ",(0,r.kt)("inlineCode",{parentName:"p"},"@davinci/mongoose")," package,\nwe can generate a Mongoose Model by passing as argument the schema defined above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mgoose } from '@davinci/mongoose';\nimport CustomerSchema from './CustomerSchema';\n\nconst { generateModel } = mgoose;\n\nconst Customer = generateModel<CustomerSchema>(CustomerSchema, 'customer', 'customers');\n\nexport default Customer;\n")),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("p",null,"@davinci/mongoose provides six different hooks: ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRead"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"afterRead"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"beforeWrite"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"afterWrite"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeDelete")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"afterDelete"),".\\\nUnder the hood, they use ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/middleware.html"},"Mongoose Middlewares")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"beforeRead / afterRead"),"\\\nIt gets triggered before/after executing any find/fetch operation.\nUnder the hood it register the following Mongoose Middlewares:\n",(0,r.kt)("inlineCode",{parentName:"li"},"find"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOne"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOneAndDelete"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOneAndRemove"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOneAndUpdate"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"deleteMany"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"update"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"updateOne"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"updateMany")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"beforeWrite / afterWrite"),"\\\nIt gets triggered before/after executing any save/persist operation.\nUnder the hood it register the following Mongoose Middlewares:\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOneAndUpdate"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"save"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"update"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"updateMany")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"beforeDelete / afterDelete"),"\\\nIt gets triggered before/after executing any delete operation.\nUnder the hood it register the following Mongoose Middlewares:\n",(0,r.kt)("inlineCode",{parentName:"li"},"deleteMany"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOneAndDelete"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"findOneAndRemove"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Document, model } from 'mongoose';\nimport { mgoose } from '@davinci/mongoose';\nimport { httpErrors } from '@davinci/core';\nimport CustomerSchema from './CustomerSchema';\nimport { afterDelete } from './hooks';\n\nconst { generateSchema, beforeRead, beforeWrite, afterDelete } = mgoose;\n\nconst schema = generateSchema(CustomerSchema);\n\nbeforeRead<Context>(schema, ({ query, context }) => {\n    // inject accountId before persisting into DB\n    if (!context) return;\n\n    const currentQuery = query.getQuery();\n    query.setQuery({ ...currentQuery, accountId: context.accountId });\n});\n\nbeforeWrite<Context, CustomerSchema>(schema, ({ query, doc, context }) => {\n    // inject accountId before persisting into DB\n    if (!context) return;\n\n    // required check for atomic operations\n    if (doc) {\n        doc.accountId = context.accountId;\n    } else {\n        // @ts-ignore\n        query.setUpdate({\n            ...query.getUpdate(),\n            accountId: context.accountId\n        });\n    }\n});\n\nafterDelete<Context>(schema, ({ doc }) => {\n    if (doc) {\n        // perform some cleanup\n    }\n});\n\nconst Customer = model<CustomerSchema & Document>('Customer', schema, 'customers');\n\nexport default Customer;\n")))}c.isMDXComponent=!0}}]);