"use strict";(self.webpackChunk_davinci_docs=self.webpackChunk_davinci_docs||[]).push([[490],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=s,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4796:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(7462),s=(r(7294),r(3905));const a={},o="Controllers",i={unversionedId:"basics/controllers",id:"version-0.x/basics/controllers",title:"Controllers",description:"A Controller is a class that implements methods that will handle incoming requests.",source:"@site/versioned_docs/version-0.x/basics/controllers.md",sourceDirName:"basics",slug:"/basics/controllers",permalink:"/docs/0.x/basics/controllers",draft:!1,tags:[],version:"0.x",frontMatter:{},sidebar:"mySidebar",previous:{title:"Directory Structure",permalink:"/docs/0.x/basics/directory-structure"},next:{title:"OpenAPI Definitions",permalink:"/docs/0.x/basics/openapi-definitions"}},l={},c=[{value:"Implements controller methods",id:"implements-controller-methods",level:2},{value:"Advanced cases (AKA: use express primitives)",id:"advanced-cases-aka-use-express-primitives",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"controllers"},"Controllers"),(0,s.kt)("p",null,"A Controller is a class that implements methods that will handle incoming requests.\nIt implements an application\u2019s business logic and acts as a bridge between the HTTP/REST API and domain/database models."),(0,s.kt)("h2",{id:"implements-controller-methods"},"Implements controller methods"),(0,s.kt)("p",null,"A controller method is a decorated class method that takes parameter and return a result.\nAs you may notice, all the logic that deal with ",(0,s.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"response")," express objects is abstracted away."),(0,s.kt)("p",null,"A class is marked as controller using the ",(0,s.kt)("inlineCode",{parentName:"p"},"@route.controller()")," decorator."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@route.[get|post|patch|put|del|head]()")," decorators mark a class method as a route handler."),(0,s.kt)("p",null,"A route handler can accept arguments, that can be defined using the ",(0,s.kt)("inlineCode",{parentName:"p"},"@route.[path|query|body]()")," decorators.\nThe type of each argument will be inferred and inspected, and validated against the value provided.\\\nYou can even supply complex types, like schema classes.",(0,s.kt)("br",{parentName:"p"}),"\n","Please note that due to a limitation on the typescript reflection mechanism, there are cases\nwhere you need to pass the type explicitly."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { route } from '@davinci/core';\n\nconst { controller, get, query, post, body } = route;\n\n@controller({ basepath: '/api/customers' })\nexport class CustomerController {\n    @get({ path: '/hello', summary: 'That is a hello method' })\n    findCustomer(@query() firstname: string) {\n        return firstname;\n    }\n\n    @post({ path: '/create', summary: 'That is a create method' })\n    create(@body() data: object) {\n        return { success: true, data };\n    }\n}\n")),(0,s.kt)("h2",{id:"advanced-cases-aka-use-express-primitives"},"Advanced cases (AKA: use express primitives)"),(0,s.kt)("p",null,"There are some cases where you may want to have more control on how the incoming request\nwill be handled.\\\nIn those cases, you can inject the Express ",(0,s.kt)("inlineCode",{parentName:"p"},"Req")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Res")," objects as arguments \\\nusing the ",(0,s.kt)("inlineCode",{parentName:"p"},"@express.[req|res]()"),"\ndecorators."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { route, express } from '@davinci/core';\nimport { Request, Response } from 'express';\n\n@route.controller({ basepath: '/api/customers' })\nexport class CustomerController {\n    @route.get({ path: '/custom-response', summary: 'This method will redirect' })\n    customResponse(@express.req() req: Request, @express.res() res: Response) {\n        const redirectUrl = req.hostname === 'myHostname' ? '/redirect-url-1' : '/redirect-url-2';\n\n        return res.redirect(redirectUrl);\n    }\n}\n")))}u.isMDXComponent=!0}}]);